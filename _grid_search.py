import numpy as np
import matplotlib.pyplot as plt

_str = '''2.127774252661833 3.311212289267945 0.3120827229088576 0.30524705305958694
2.1488077339812945 3.4215283454952345 0.301993313759289 0.3066219684247652
2.048194607964794 3.4615780780068164 0.3218281547322043 0.30270054727728535
2.12674134279423 3.436322102757833 0.3057769171324927 0.29189816537224
2.1056448250677167 3.3420180056925415 0.31507606840647107 0.27783216247723624
2.104771599731274 3.632885713036176 0.30150026700692273 0.30254375235014713
2.1533345007570186 3.44917198150798 0.2997199816397976 0.2911848149790513

2.289199097412573 3.2614376579040463 0.2848356292038152 0.30529171998796706
2.188445759108687 3.4691134254914298 0.29189173033543037 0.3170837405966854
2.2529926242638414 3.4039786321314875 0.28330954755817883 0.30370499440801585
2.271534689549358 3.3255899606726937 0.2842229417185816 0.3050048732928939
2.289796494557623 3.4262947224505247 0.2759069229532739 0.29602186298989697
2.2449721680197685 3.4915092468701356 0.28044680297690827 0.2866846646169943
2.275663226937098 3.4880256659370117 0.2752948771360848 0.2855997783326383

2.436553616344268 3.452719048668401 0.2523247830482775 0.31265046630925464
2.3590592651487547 3.5458422799391367 0.2592248617255611 0.29212636698981825
2.3622485092189214 3.3532141564507256 0.2681404319799206 0.31382982976824747
2.3205330873861962 3.3930312961760776 0.2725662619460274 0.29758477954200707
2.3463061345232665 3.4942511277482113 0.26354949561582036 0.2874409774336003
2.3765906975198194 3.441207491885802 0.26149392106335073 0.27896803580074675
2.43356299966764 3.428337743616931 0.25393638704666577 0.29166240603181065

2.474958510077213 3.3462816054344247 0.25255896789744736 0.3055998979035941
2.4861760830299158 3.358931198890938 0.250417723233185 0.29439405657767476
2.4807650090898483 3.3712560392987725 0.2504773858084311 0.30252815769263103
2.5306234212261063 3.443163187237769 0.2405010078882836 0.2855382204963916
2.5007821603109393 3.340317637925453 0.2495239600604104 0.28834579655366316
2.482672169279878 3.3959000737445115 0.24895543147692406 0.27784576927721005
2.4839270800602944 3.520824545285744 0.2427471926753682 0.2763684590991238

2.6518344156358187 3.4152219180758014 0.2279382755855156 0.3084905981665027
2.5867059761272984 3.368792157916065 0.23756877215655514 0.29648296037235566
2.5577759643175444 3.4804062320270366 0.23540774311531107 0.30130100523423664
2.5969590611348523 3.506145176641206 0.22962238598213097 0.29178788497279207
2.539243295724406 3.5051459147429815 0.2364858438868751 0.2807555880125972
2.5310880643223768 3.604111089139602 0.23307830609540828 0.2716021873459645
2.5902923492389958 3.454547359758622 0.2328347815785876 0.28156079029422293

2.7409212292073954 3.3332814549659617 0.22311163906068293 0.31393220043224573
2.725837286351742 3.4653408274129216 0.21785982377917257 0.2989992098532414
2.6860214492769643 3.5353931690716482 0.21861205557431918 0.3086092527249703
2.680427353588381 3.530017563538511 0.21943506118466005 0.28897914901129845
2.6657869770139 3.4708159201655246 0.22372905366484694 0.29900819647925014
2.6814904156764046 3.4770470844846466 0.2217884664973756 0.28261251713421076
2.6607563016323446 3.4677157601977364 0.22441015680594323 0.27717289377426774

2.842498107262196 3.4927793799350466 0.20573602900128546 0.30988101047828204
2.745348897167578 3.3289215164947876 0.2229185428293942 0.3049567969151476
2.8523574606502957 3.483218105930547 0.205332529431126 0.3041399014877649
2.791470882319269 3.413411416846346 0.21415841688798865 0.3168577914922261
2.76059456903448 3.5631218535862517 0.20998437554268684 0.28252053162578894
2.7343377063092693 3.4187843741394723 0.21930779035626613 0.2860936849424894
2.737912238231428 3.4282937644706895 0.2184847989104645 0.2675594887426281

2.8447435588322922 3.2624616182457946 0.21752288248729168 0.3028662002996579
2.8442847351737046 3.4055609670104365 0.20983298285204682 0.29878527724835496
2.8775116528102007 3.433516967964767 0.20559643529018426 0.29981947067544495
2.832643432604361 3.3641028524388474 0.21298933156108982 0.2892951728116864
2.8776682392258253 3.481742287346433 0.20324976999412744 0.2890421598163917
2.8942743351530504 3.506190784543871 0.20072162137743177 0.28055756765461903
2.893356454109834 3.509697015969531 0.20063492765472632 0.27650409157020767

'''

x, y = np.meshgrid(np.arange(10.4, 11 + 0.1, 0.1), np.arange(4.8, 5.5 + 0.1, 0.1))
_data = []
v_strs = _str.split("-\n")
for v_str in v_strs:
    a_strs = v_str.split("\n")
    for a_str in a_strs[:-1]:
        nums = a_str.split()
        for num in nums:
            if num != "":
                _data.append(float(num))

_data = np.array(_data).reshape([8, 7, 4])
v_sigma = _data[:, :, 0]
a_sigma = _data[:, :, 1]

def _min(a, b):
    cmp = a > b
    return cmp * b + (1-cmp) * a


v_a = (v_sigma - a_sigma) / _min(v_sigma, a_sigma)
# v_a = v_a.clip(-0.25, 0.25)
op_diff = (_data[:, :, 2] - _data[:, :, 3]) / _min(_data[:, :, 2], _data[:, :, 3])
# op_diff = op_diff.clip(-0.25, 0.25)

# plt.pcolor(op_diff)
# plt.show()

index = 0
for i in zip(v_a.flatten(), op_diff.flatten()):
    index += 1
    if i[1] > -0.2:
        print(index, i[0], i[1])


ax3d = plt.gca(projection='3d')
# ax3d.plot_surface(x, y, v_sigma, color="red")
# ax3d.plot_surface(x, y, a_sigma, color="green")
# ax3d.plot_surface(x, y, np.zeros_like(x), color="red")
ax3d.plot_surface(x, y, v_a, cmap=plt.cm.Spectral)#
# ax3d.plot_surface(x, y, op_diff, cmap=plt.cm.Spectral)#

plt.show()